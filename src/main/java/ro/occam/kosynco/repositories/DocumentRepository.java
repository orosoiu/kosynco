package ro.occam.kosynco.repositories;

import io.micronaut.data.annotation.Join;
import io.micronaut.data.annotation.Query;
import io.micronaut.data.jdbc.annotation.JdbcRepository;
import io.micronaut.data.model.query.builder.sql.Dialect;
import io.micronaut.data.repository.CrudRepository;
import ro.occam.kosynco.entities.Document;
import ro.occam.kosynco.entities.User;

import java.util.List;
import java.util.Optional;

@JdbcRepository(dialect = Dialect.ANSI)
public interface DocumentRepository extends CrudRepository<Document, Long> {

    /**
     * Return all documents owned by a user or an empty list if none
     */
    @Join(value = "user", type = Join.Type.FETCH)
    List<Document> findAllByUser(User user);

    /**
     * Returns the document identified by documentHash and belonging to user, empty Optional if document doesn't exist
     */
    @Join(value = "user", type = Join.Type.FETCH)
    Optional<Document> findByDocumentHashAndUser(String documentHash, User user);

    /**
     * Return true if the document identified by documentHash and belonging to user exists, false otherwise
     * Note: the code autogenerated by Micronaut does not work with SQLite, so we need to use a custom query
     */
    @Query(value = "SELECT EXISTS(SELECT 1 FROM document WHERE document_hash = :documentHash AND username = :username)")
    boolean exists(String documentHash, String username);
}
